// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package base

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcSegmentClient is the client API for GrpcSegment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcSegmentClient interface {
	GetSegment(ctx context.Context, in *GrpcBizToken, opts ...grpc.CallOption) (*GrpcSegmentInfo, error)
}

type grpcSegmentClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcSegmentClient(cc grpc.ClientConnInterface) GrpcSegmentClient {
	return &grpcSegmentClient{cc}
}

func (c *grpcSegmentClient) GetSegment(ctx context.Context, in *GrpcBizToken, opts ...grpc.CallOption) (*GrpcSegmentInfo, error) {
	out := new(GrpcSegmentInfo)
	err := c.cc.Invoke(ctx, "/base.GrpcSegment/GetSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcSegmentServer is the server API for GrpcSegment service.
// All implementations must embed UnimplementedGrpcSegmentServer
// for forward compatibility
type GrpcSegmentServer interface {
	GetSegment(context.Context, *GrpcBizToken) (*GrpcSegmentInfo, error)
	mustEmbedUnimplementedGrpcSegmentServer()
}

// UnimplementedGrpcSegmentServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcSegmentServer struct {
}

func (UnimplementedGrpcSegmentServer) GetSegment(context.Context, *GrpcBizToken) (*GrpcSegmentInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSegment not implemented")
}
func (UnimplementedGrpcSegmentServer) mustEmbedUnimplementedGrpcSegmentServer() {}

// UnsafeGrpcSegmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcSegmentServer will
// result in compilation errors.
type UnsafeGrpcSegmentServer interface {
	mustEmbedUnimplementedGrpcSegmentServer()
}

func RegisterGrpcSegmentServer(s grpc.ServiceRegistrar, srv GrpcSegmentServer) {
	s.RegisterService(&GrpcSegment_ServiceDesc, srv)
}

func _GrpcSegment_GetSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcBizToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcSegmentServer).GetSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.GrpcSegment/GetSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcSegmentServer).GetSegment(ctx, req.(*GrpcBizToken))
	}
	return interceptor(ctx, in, info, handler)
}

// GrpcSegment_ServiceDesc is the grpc.ServiceDesc for GrpcSegment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcSegment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.GrpcSegment",
	HandlerType: (*GrpcSegmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSegment",
			Handler:    _GrpcSegment_GetSegment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base/segment.proto",
}
